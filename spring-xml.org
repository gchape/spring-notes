#+DESCRIPTION: Spring Framework 5
#+AUTHOR: Giorgi Chapidze
#+DATE: <2025-02-09 Sun>

* Dependency injection frameworks:

1. PicoContainer
2. Google Guice
3. *Spring Framework*


* Reducing Coupling

There is always some level of coupling between objects,
but our goal is to reduce the coupling between *architectural*
components and layers.

The _Spring framework_ addresses this issue of coupling by:

1. Program to Interfaces
2. Dependency Injection
3. Centralise Configuration


* The Spring Container(XML)

+ *XML Example (Property-Based Injection):*
    
#+begin_src xml
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
  "http://www.springframework.org/dtd/spring-beans.dtd">

  <beans>
    <!-- Bean definition with property-based injection -->
    <bean id="myBean" class="com.example.MyClass">
      <!-- Inject a value into a setter method -->
      <property name="someProperty" value="SomeValue"/>
    </bean>
  </beans>
#+end_src

+ *XML Example (Constructor-Based Injection):*
  
#+begin_src xml
  <?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
  "http://www.springframework.org/dtd/spring-beans.dtd">

  <beans>
    <!-- Bean definition with constructor-based injection -->
    <bean id="myBean" class="com.example.MyClass">
      <constructor-arg value="SomeValue"/>
    </bean>
  </beans>
#+end_src

** When to declare an object as a bean?

In Spring, you declare an object as a bean when you want
to manage it through the Spring IoC (Inversion of Control)
container.

This allows Spring to take care of object
creation, configuration, and dependency injection.

You typically declare beans for components that are
part of your application's infrastructure, such as services,
repositories, and configuration classes, rather than for
simple domain objects.

+ *Application elements likely to change due to evolving
  architecture/requirements:* These are the components that
  you might want Spring to manage, as they are subject to
  changes and may need to be easily configurable or
  replaceable without modifying the core application code.

  These are often beans, since Springâ€™s IoC container helps
  you manage their lifecycle and dependencies, which supports
  agile development and architecture flexibility.

+ *Not configuring domain objects:* Domain objects, which
  are typically POJOs: represent the core business logic
  of your application and usually don't require Spring
  management unless there are specific reasons
  (e.g., they need to be injected with other beans).
  These objects typically remain simple, and their
  configurations do not change based on application
  requirements.

  Thus, domain objects are often not declared as Spring
  beans unless necessary for business logic that requires
  such configuration.

 #+ATTR_HTML: :textarea t :width 50%
  [[./images/layers.png]]


* More Container Concepts

   - *<bean> tag*: 
     - Defines a bean in the Spring container with its id and class.
     - The id attribute identifies the bean, and the class attribute
       specifies the fully qualified class name.
   
   - *<property> tag*: 
     - The name attribute corresponds to the property of the class.
     - The value or ref attribute injects either a value or a reference to another bean.

   - *Injecting dependencies*: 
     - The `OrderService` bean has a dependency on the `CustomerRepository` bean, injected
       via the `<property>` tag. The `customerRepository` property of `OrderService` is set
       using the ref attribute, referencing the `customerRepository` bean.

   - *ApplicationContext*: 
     - The `ApplicationContext` loads the Spring beans and manages their lifecycle.
       The `ClassPathXmlApplicationContext` is used to load the XML configuration.

** Additional DI Methods

   - *Constructor-based Injection*: Instead of setter-based injection, you can
     use constructor-based injection. Here's how:

     #+BEGIN_SRC xml
     <bean id="orderService" class="com.example.OrderService">
         <constructor-arg ref="customerRepository" />
     </bean>
     #+END_SRC

   - This will invoke the constructor of the `OrderService` class that accepts
     a `CustomerRepository` object.

** Lazy vs Eager

*1. Eager Initialization*

   Eager initialization means that the Spring container will initialize
   the beans as soon as the application context is created, regardless of
   whether they are used or not.

   - *When is it used?*
     - The bean is created and initialized during the startup of the Spring
       application context.
       
     - Eager initialization is the default behavior for beans in Spring unless
       configured otherwise.
   
   - *How to configure it in XML?*

     By default, Spring beans are eagerly initialized unless you explicitly
     specify lazy initialization.
     
     If you want to ensure a bean is eagerly initialized, you can use:

     #+BEGIN_SRC xml
     <bean id="orderService" class="com.example.OrderService" />
     #+END_SRC

     Here, orderService will be eagerly initialized when the Spring context is loaded.

   - *Example of Eager Initialization*:

     If you have an application with multiple beans, all beans will be initialized when
     the Spring context starts, even if they are not used.

     #+BEGIN_SRC java
     // Bean Class
     public class OrderService {
         public OrderService() {
             System.out.println("OrderService Initialized");
         }
     }

     // Main Class
     public class Main {
         public static void main(String[] args) {
             ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
             // The OrderService instance is initialized immediately
         }
     }
     #+END_SRC

     When the `ApplicationContext` is created, the `OrderService`
     constructor will be called immediately, even if you don't
     explicitly request the bean.

*2. Lazy Initialization*

   Lazy initialization means that the bean will only be instantiated when
   it is first needed or requested. This can help optimize the startup time
   of the application, as beans are not created unless they are required.

   - *When is it used?*
     - The bean is created only when it's explicitly requested, not at the
       application context startup.
       
     - Lazy initialization is often used for beans that are rarely used or
       for performance reasons.

   - *How to configure it in XML?*

     To configure lazy initialization in Spring XML, use the lazy-init attribute:

     #+BEGIN_SRC xml
     <bean id="orderService" class="com.example.OrderService" lazy-init="true" />
     #+END_SRC

     With this configuration, the `orderService` will be lazily initialized and
     only created when it is requested for the first time.

   - *Example of Lazy Initialization*:

     #+BEGIN_SRC java
     // Bean Class
     public class OrderService {
         public OrderService() {
             System.out.println("OrderService Initialized");
         }
     }

     // Main Class
     public class Main {
         public static void main(String[] args) {
             ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
             // The OrderService instance is not created yet
             OrderService service = (OrderService) context.getBean("orderService");
             // The OrderService instance is now created (lazy initialization)
         }
     }
     #+END_SRC

     In this case, the `OrderService` instance will not be created until the first call to
     `context.getBean("orderService")`. Therefore, the `OrderService Initialized`
     message will only appear when the bean is requested.

*3. Key Differences*

   | Feature                | Eager Initialization                                  | Lazy Initialization                                   |
   |------------------------+-------------------------------------------------------+-------------------------------------------------------|
   | Bean Creation Timing   | Created at application startup                        | Created when it is first requested                    |
   | Default Behavior       | Default in Spring                                     | Must be explicitly configured with `lazy-init="true"` |
   | Impact on Startup Time | Slower startup (more beans are initialized)           | Faster startup (only used beans are created)          |
   | Resource Usage         | Higher memory usage at startup                        | Memory usage is lower until bean is needed            |
   | Use Case               | Beans that are always needed early in the application | Beans that are not used frequently                    |

*4. Pros and Cons*

   - *Eager Initialization*:
     - *Pros*: 
       - Simplifies the application since beans are guaranteed to be
         initialized immediately.
         
       - Good for beans that are always required and used frequently.
     - *Cons*: 
       - Slower startup time because all beans are initialized upfront.
       - Higher memory consumption as unused beans are initialized.

   - *Lazy Initialization*:
     - *Pros*: 
       - Faster startup time as beans are only created when necessary.
       - Reduces memory consumption if some beans are rarely used.
     - *Cons*: 
       - Can lead to delays in service access since beans are initialized on-demand.
       - Some configurations may require additional management to handle bean lifecycle properly.

*5. Choosing Between Eager and Lazy Initialization*

   - Use *eager initialization* for:
     - Critical beans that must be ready immediately upon startup.
     - Beans that are frequently used across the application.
   
   - Use *lazy initialization* for:
     - Optional or rarely used beans.
     - Beans that are resource-intensive or take time to initialize.


* JdbcTemplate

#+begin_src xml
  <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
    <property name="driverClass" value="org.postgresql.Driver"/>
    <property name="url" value="jdbc:postgresql://localhost:5432/postgres"/>
    <property name="username" value="postgres"/>
    <property name="password" value=""/>
  </bean>

  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <constructor-arg name="dataSource" ref="dataSource"/>
  </bean>
#+end_src


* spring-aop

#+ATTR_HTML: :textarea t :width 50%
[[./images/aop-advice-types.png]]

#+begin_src xml
  <bean id="repositoryServiceImpl" class="io.github.gchape.repository.RepositoryServiceImpl">
    <constructor-arg name="jdbcTemplate" ref="jdbcTemplate"/>
  </bean>

  <bean id="loggingAdvice" class="io.github.gchape.advice.SimpleLoggingAdvice">
  </bean>

  <bean id="repositoryServiceImplProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="proxyInterfaces" value="io.github.gchape.repository.RepositoryService"/>
    <property name="target" ref="repositoryServiceImpl"/>

    <property name="interceptorNames">
      <list>
        <value>loggingAdvice</value>
      </list>
    </property>
  </bean>
#+end_src

#+ATTR_HTML: :textarea t :width 50%
[[./images/aop-jargons.png]]

** MethodBeforeAdvice

#+begin_src java
  public class SimpleLoggingAdvice implements MethodBeforeAdvice {
      @Override
      public void before(Method method, Object[] args, Object target) throws Throwable {
          System.out.println("Before " + method.getName());
      }
  }
#+end_src

** AfterReturningAdvice

#+begin_src java
  public class SimpleLoggingAdvice implements AfterReturningAdvice {
      @Override
      public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {

      }
  }
#+end_src

#+ATTR_HTML: :textarea t :width 50%
[[./images/aop-weaving.png]]

** MethodInterceptor

#+begin_src java
  import org.aopalliance.intercept.MethodInterceptor;
  import org.aopalliance.intercept.MethodInvocation;

  public class SimpleLoggingAdvice implements MethodInterceptor {
      @Override
      public Object invoke(MethodInvocation invocation) throws Throwable {
  	// before
  	// ...
  	var result = invocation.proceed();
  	// after
  	// ...
  	return result;
      }
  }
#+end_src


* AspectJ

If we want to use Aspect-Oriented Programming (AOP) for all of
our service classes, we can take advantage of AspectJ's
pointcut mechanism to simplify the configuration process.

This way, we avoid repeating the same XML configuration block
for each individual service class.

** Problem
When configuring AOP using XML, we may find ourselves
repeating the same configuration for each class under the
`*.service` package.

If we are looking to avoid this repetition, we can leverage
pointcuts to target all service classes in a more efficient
manner.

** Solution
Instead of manually configuring each service class, we can
define a more general pointcut expression that matches all
the service classes.

Then, we apply the aspect to these classes in a single block,
reducing the need for duplication.

** Pointcut Syntax
A pointcut expression is used to match methods in a specific
package or class. For instance, to apply AOP to all methods
under the `service/` package, regardless of the return type
or parameters, the pointcut expression would be:

#+begin_src shell
  execution(* *service*.*(..))
#+end_src

This expression matches all methods in classes within the
`service/` package.

** Adding AOP Support via XML
In XML-based configuration, you can define AOP-related
elements and apply them to the desired classes.

The following XML configuration provides the necessary setup
for AspectJ integration:

#+begin_src xml
  <?xml version="1.0" encoding="UTF-8"?>
  <beans xmlns="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:aop="http://www.springframework.org/schema/aop"
         xsi:schemaLocation="http://www.springframework.org/schema/beans 
                             http://www.springframework.org/schema/beans/spring-beans.xsd
                             http://www.springframework.org/schema/aop 
                             http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- Bean definitions go here -->

  </beans>
#+end_src

** AspectJ - XML Configuration
Once the basic AOP configuration is in place, we can add an
aspect that defines the pointcut expressions and advice
(before, after, around).

The XML configuration for an aspect looks like this:

#+begin_src xml
  <aop:config>
    <!-- Reference to an aspect bean -->
    <aop:aspect ref="performanceTimingAspect">
      <!-- Pointcut definition and advice methods -->

      <!-- Around advice -->
      <aop:around method="around" pointcut="execution(* *service*.*(..))"/>
      
      <!-- Before advice -->
      <aop:before method="before" pointcut="execution(* *service*.*(..))"/>
      
      <!-- After advice -->
      <aop:after method="after" pointcut="execution(* *service*.*(..))"/>
    </aop:aspect>
  </aop:config>
#+end_src

** Example: Performance Timing Advice
To demonstrate the use of aspects, let's look at an example
where we use AOP to measure the performance of service methods.

This example shows the implementation of a performance timing
advice that wraps method execution.

#+begin_src java
  public class PerformanceTimingAdvice {

      public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
          long startTime = System.currentTimeMillis();

          Object result = joinPoint.proceed();

          long endTime = System.currentTimeMillis();

          System.out.println("Execution time: " + (endTime - startTime) + " ms");

          return result;
      }

      public void after() throws Throwable {
          // Additional code for after advice (if needed)
      }

      public void before() throws Throwable {
          // Additional code for before advice (if needed)
      }
  }
#+end_src

** Using Annotations

To use Aspect-Oriented Programming (AOP) with annotations in Spring, follow these steps:

1. *Enable AspectJ Autoproxying*
   First, you need to enable AspectJ-based AOP proxying in
   your Spring configuration.

   Add the following command in the `application.xml` to
   enable autoproxying:

   #+begin_src xml
     <aop:aspectj-autoproxy/>
   #+end_src

   This tag enables the use of AspectJ annotations to define
   aspects and apply them to your beans automatically.

2. *Annotate Your Aspects and Methods*
   Next, you can use annotations like `@Before`, `@After`,
   `@Around`, etc., in your aspect classes to define the
   corresponding advice.

   Hereâ€™s an example of how to annotate your aspect:

   #+ATTR_HTML: :width 50%
   [[./images/aop-annotations.png]]

   *Example Aspect Class with Annotations:*
   The following Java code shows how you can define an aspect with annotations for performance timing advice:

   #+begin_src java
     @Aspect
     public class PerformanceTimingAspect {

         @Around("execution(* com.example.service.*.*(..))")
         public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
             long startTime = System.currentTimeMillis();

             Object result = joinPoint.proceed();

             long endTime = System.currentTimeMillis();

             System.out.println("Execution time: " + (endTime - startTime) + " ms");

             return result;
         }

         @Before("execution(* com.example.service.*.*(..))")
         public void before() {
     	// code
         }

         @After("execution(* com.example.service.*.*(..))")
         public void after() {
     	// code
         }
     }
   #+end_src


* Wiring using annotations

+ Activate *component-scan*
  
#+begin_src xml
  <context:component-scan base-package=""/>
#+end_src

+ *auto-wire* in xml
  
  #+begin_src xml
    <bean id="" class="" auto-wire=""/>
  #+end_src
  
  *auto-wire* options:
  - byName
  - byType
  - constructor
     

* TODO Transactions
